{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to my documentation","text":"<p>You will find some kind stuff here.</p>"},{"location":"infra/","title":"My infrastructure","text":"<p>This the detail of my home infrastrucutre.</p>"},{"location":"infra/#schema","title":"Schema","text":"<p>Simple schema of my infrastructure</p> <p></p>"},{"location":"raspberry/","title":"My Raspberry setup","text":""},{"location":"media-server/backup/","title":"Backup","text":"<p>I backup my data every day (exept the ISO files because is too large). To backup my data, The 2 followings scripts are launched trough a Crontab every night.</p>"},{"location":"media-server/backup/#creation-of-the-backup","title":"Creation of the backup","text":"<p>This script create a tar archive of important data of different applications.</p> backup.sh<pre><code>#!/bin/bash\n\n# Chemin du dossier de sauvegarde\nbackup_folder=\"$HOME/backup\"\n\n# Chemin du dossier de travail\nworkspace_folder=\"$HOME/workspace\"\n\n# Chemin du fichier de log\nlog_file=\"$workspace_folder/scripts/logs/backup_script.log\"\n\n# Cr\u00e9er le dossier de sauvegarde s'il n'existe pas\nif ! mkdir -p \"$backup_folder\"; then\n    echo \"$(date +'%Y-%m-%d %H:%M:%S') - Erreur lors de la cr\u00e9ation du dossier de sauvegarde\" &gt;&gt; \"$log_file\"\n    exit 1\nfi\n\n# Obtenir l'heure pr\u00e9cise au format HH-MM-SS\ncurrent_time=$(date +'%H-%M-%S')\n\n# Liste des fichiers \u00e0 sauvegarder\nfiles_to_backup=(\n    \"cocoflix/docker-compose.yml\"\n    \"cocoflix/config/jackett\"\n    \"cocoflix/config/proxy\"\n    \"cocoflix/config/transmission/transmission-home\"\n    \"cocoflix/config/radarr/Backups\"\n    \"cocoflix/config/sonarr/Backups\"\n)\n\n# Ex\u00e9cuter la commande tar avec le chemin dynamique et rediriger la sortie vers le fichier de journal\ntar_output=$(tar -czvf \"$backup_folder/archive_$(date +'%d-%m-%Y')_$current_time.tar.gz\" -C \"$workspace_folder\" \"${files_to_backup[@]}\" 2&gt;&amp;1)\n\n# D\u00e9limiteur\ndelimiter=\"===============================\"\n\n# V\u00e9rifier le code de retour de la commande tar\nif [ $? -eq 0 ]; then\n    # Journaliser le succ\u00e8s de la sauvegarde\n    echo -e \"$(date +'%Y-%m-%d %H:%M:%S') - Backup r\u00e9ussi\\n$delimiter\\nD\u00e9tails :\\n$tar_output\\n$delimiter\" &gt;&gt; \"$log_file\"\nelse\n    # Journaliser l'erreur en cas d'\u00e9chec de la commande tar\n    echo -e \"$(date +'%Y-%m-%d %H:%M:%S') - Erreur lors de la sauvegarde\\n$delimiter\\nD\u00e9tails :\\n$tar_output\\n$delimiter\" &gt;&gt; \"$log_file\"\nfi\n</code></pre>"},{"location":"media-server/backup/#backup-retention","title":"Backup retention","text":"<p>To avoid taking up too much space I want to keep only 7 backups in same time, I use following scripts to clean the old files.</p> clean_backup.sh<pre><code>#!/bin/bash\n\nbackup_dir=\"$HOME/backup\"\nkeep_backups=7\nlog_file=\"$HOME/workspace/scripts/logs/backup_clean_script.log\"\nbackup_pattern=\"archive_\"\n\n# Fonction pour journaliser les messages\nlog() {\n    echo \"$(date +\"%Y-%m-%d %H:%M:%S\"): $1\" &gt;&gt; \"$log_file\"\n}\n\n# V\u00e9rification de l'existence du r\u00e9pertoire de sauvegarde\nif [ ! -d \"$backup_dir\" ]; then\n    log \"Le r\u00e9pertoire de sauvegarde $backup_dir n'existe pas. Arr\u00eat du script.\"\n    exit 1\nfi\n\n# V\u00e9rification des autorisations d'\u00e9criture\nif [ ! -w \"$backup_dir\" ]; then\n    log \"Le script n'a pas les autorisations d'\u00e9criture dans le r\u00e9pertoire de sauvegarde $backup_dir. Arr\u00eat du script.\"\n    exit 1\nfi\n\ncd \"$backup_dir\" || exit\n\nlog \"---- D\u00e9but du script ----\"\n\n# Compte le nombre total de backups\ntotal_backups=$(find . -maxdepth 1 -type f -name \"$backup_pattern*\" | wc -l)\nlog \"Nombre total de sauvegardes: $total_backups\"\n\n# Supprime les backups les plus anciens exc\u00e9dant le nombre souhait\u00e9\nif [ \"$total_backups\" -gt \"$keep_backups\" ]; then\n    backups_to_remove=$((total_backups - keep_backups))\n    log \"Nombre de sauvegardes \u00e0 supprimer: $backups_to_remove\"\n\n    # Liste les fichiers \u00e0 supprimer\n    files_to_remove=$(find . -maxdepth 1 -type f -name \"$backup_pattern*\" | sort -r | tail -n \"$backups_to_remove\")\n\n    # Supprime les fichiers\n    echo \"$files_to_remove\" | xargs rm -f\n\n    # V\u00e9rification des erreurs lors de la suppression\n    if [ $? -eq 0 ]; then\n        log \"Fichiers supprim\u00e9s avec succ\u00e8s:\"\n        log \"$files_to_remove\"\n    else\n        log \"Erreur lors de la suppression des fichiers. Veuillez v\u00e9rifier les autorisations ou les fichiers verrouill\u00e9s.\"\n    fi\nfi\n\nlog \"---- Fin du script ----\"\n</code></pre>"},{"location":"media-server/mediaserver/","title":"Overview","text":"<p>I have setup a media server to watch some contents at home. Also available from external network trough a VPN.</p>"},{"location":"media-server/mediaserver/#hardware","title":"Hardware","text":"<p>My media server run on a NiPoGi AK2 PLUS Mini PC with following specifications :</p> <pre><code>Processor   :   Intel Alder Lake-N100 \nRAM         :   16GB DDR4\nStorage     :   512GB M.2 SSD\n</code></pre> <p>I also use a Raspberry Pi 3 B+ who host the VPN and a DNS server.</p>"},{"location":"media-server/mediaserver/#software","title":"Software","text":"<p>I use different application to run my media server. All these applications run trough Docker container.</p>"},{"location":"media-server/mediaserver/#tranmission-openvpn","title":"Tranmission-OpenVPN","text":"<p>I use Transmission-OpenVPN to download my favorite Linux ISO trough torrent.</p> <p>This is a Docker container running Transmission torrent client with WebUI over an OpenVPN tunnel I use a VPN to avoid exposing my public IP on Internet, I use PIA as VPN provider.</p>"},{"location":"media-server/mediaserver/#jackett","title":"Jackett","text":"<p>I use Jackett as indexer</p>"},{"location":"media-server/mediaserver/#radarr","title":"Radarr","text":""},{"location":"media-server/mediaserver/#sonarrr","title":"Sonarrr","text":""},{"location":"media-server/mediaserver/#jellyfin","title":"Jellyfin","text":"<p>Jellyfin is a Free Software Media System that permit you to read your different media. I use it trough a Docker container made by LinuxServer.io.</p>"}]}