{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to my documentation","text":"<p>You will find some kind stuff here.</p>"},{"location":"infra/","title":"My infrastructure","text":"<p>This the detail of my home infrastrucutre.</p>"},{"location":"infra/#schema","title":"Schema","text":"<p>Simple schema of my infrastructure</p> <p></p>"},{"location":"raspberry/","title":"My Raspberry setup","text":"<p>I use a Raspberry Pi 3 Model B+ to host a VPN and DNS server.</p>"},{"location":"raspberry/#pivpn","title":"PiVPN","text":"<p>I use PiVPN to transform my Raspberry into a VPN server. This is useful to access at my local network from a external network.</p>"},{"location":"raspberry/#adguard-dns-server","title":"AdGuard (DNS server)","text":"<p>I use AdGuard Home as DNS server and also to block ads on my local network.</p>"},{"location":"media-server/backup/","title":"Backup","text":"<p>I backup my data every day (exept the ISO files because is too large). To backup my data, I use the 2 followings basic bash scripts. These scripts are launched trough a crontab every night.</p>"},{"location":"media-server/backup/#creation-of-the-backup","title":"Creation of the backup","text":"<p>This script create a tar archive of important data of different applications.</p> backup.sh<pre><code>#!/bin/bash\n\nbackup_folder=\"$HOME/backup-s3\"\nworkspace_folder=\"$HOME/workspace/cocoflix/\"\nlog_file=\"$workspace_folder/scripts/logs/backup_script.log\"\n\nif ! mkdir -p \"$backup_folder\"; then\n    echo \"$(date +'%Y-%m-%d %H:%M:%S') - Cannot create backup folder\" &gt;&gt; \"$log_file\"\n    exit 1\nfi\n\ncurrent_time=$(date +'%H-%M-%S')\nfiles_to_backup=(\n    \"../cocoflix/docker-compose.yml\"\n    \"../cocoflix/config/jackett\"\n    \"../cocoflix/config/proxy\"\n    \"../cocoflix/config/transmission/transmission-home\"\n    \"../cocoflix/config/radarr/Backups\"\n    \"../cocoflix/config/sonarr/Backups\"\n    \"../cocoflix/scripts/backup.sh\"\n    \"../cocoflix/scripts/clean_backup.sh\"\n)\n\ntar_output=$(tar -czvf \"$backup_folder/archive_$(date +'%d-%m-%Y')_$current_time.tar.gz\" -C \"$workspace_folder\" \"${files_to_backup[@]}\" 2&gt;&amp;1)\ndelimiter=\"===============================\"\n\nif [ $? -eq 0 ]; then\n    echo -e \"$(date +'%Y-%m-%d %H:%M:%S') - Successfull backup\\n$delimiter\\nDetails :\\n$tar_output\\n$delimiter\" &gt;&gt; \"$log_file\"\nelse\n    echo -e \"$(date +'%Y-%m-%d %H:%M:%S') - Error while making backup\\n$delimiter\\nDetails :\\n$tar_output\\n$delimiter\" &gt;&gt; \"$log_file\"\nfi\n</code></pre>"},{"location":"media-server/backup/#backup-retention","title":"Backup retention","text":"<p>To avoid taking up too much space I want to keep only 7 backups in same time, I use following scripts to clean the old files.</p> clean_backup.sh<pre><code>#!/bin/bash\n\nbackup_dir=\"/home/corentin/backup-s3\"\n\ncd \"$backup_dir\" || exit\n\nnum_backups=$(ls -1 | wc -l)\n\nnum_backups_to_delete=$((num_backups - 7))\n\nif [ \"$num_backups_to_delete\" -gt 0 ]; then\n\n    backups_to_delete=$(ls -1tr | head -n \"$num_backups_to_delete\")\n\n    echo \"Removing old backup :\"\n    echo \"$backups_to_delete\" | while read -r backup; do\n        echo \" Deleting  $backup\"\n        rm \"$backup\"\n    done\nelse\n    echo \"Total backup : $num_backups. No backup to delete.\"\nfi\n</code></pre>"},{"location":"media-server/backup/#where-i-save-the-backup","title":"Where I save the backup ?","text":"<p>I save my backup on a S3 OVHcloud object storage bucket.</p> <p>I have made a mount of the bucket with s3fuse To made the mount I have first create following file :</p> <pre><code>sudo vim /etc/passwd-s3fs\n</code></pre> <p>With following content : echo /etc/passwd-s3fs<pre><code>ACCESS_KEY_ID:SECRET_ACCESS_KEY\n</code></pre></p> <p>Then to made the mount persistent, I have add following line in etc/fstab file : <pre><code>CONTAINER-NAME /path/to/mount/folder fuse.s3fs _netdev,allow_other,use_path_request_style,url=https://s3.rbx.io.cloud.ovh.net/ 0 0\n</code></pre></p>"},{"location":"media-server/mediaserver/","title":"Overview","text":"<p>I have setup a media server to watch some contents at home. Also available from external network trough a VPN.</p>"},{"location":"media-server/mediaserver/#hardware","title":"Hardware","text":"<p>My media server run on a NiPoGi AK2 PLUS Mini PC with following specifications :</p> <pre><code>Processor   :   Intel Alder Lake-N100 \nRAM         :   16GB DDR4\nStorage     :   512GB M.2 SSD\n</code></pre>"},{"location":"media-server/mediaserver/#software","title":"Software","text":"<p>I use different application to run my media server. All these applications run trough Docker container.</p>"},{"location":"media-server/mediaserver/#tranmission-openvpn","title":"Tranmission-OpenVPN","text":"<p>I use Transmission-OpenVPN to download my favorite Linux ISO trough torrent.</p> <p>This is a Docker container running Transmission torrent client with WebUI over an OpenVPN tunnel I use a VPN to avoid exposing my public IP on Internet, I use PIA as VPN provider.</p>"},{"location":"media-server/mediaserver/#jackett","title":"Jackett","text":"<p>I use Jackett as indexer</p>"},{"location":"media-server/mediaserver/#radarr","title":"Radarr","text":""},{"location":"media-server/mediaserver/#sonarrr","title":"Sonarrr","text":""},{"location":"media-server/mediaserver/#jellyfin","title":"Jellyfin","text":"<p>Jellyfin is a Free Software Media System that permit you to read your different media. I use it trough a Docker container made by LinuxServer.io.</p>"}]}